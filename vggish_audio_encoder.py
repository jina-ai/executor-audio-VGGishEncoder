__copyright__ = "Copyright (c) 2021 Jina AI Limited. All rights reserved."
__license__ = "Apache-2.0"

import os
from typing import Any, Optional, List, Iterable
import tensorflow as tf
tf.compat.v1.disable_eager_execution()

from jina import Executor, requests, Document, DocumentArray
from vggish.vggish_postprocess import *
from vggish.vggish_slim import *
from tensorflow.python.framework import ops
from jina_commons.batching import get_docs_batch_generator

cur_dir = os.path.dirname(os.path.abspath(__file__))


class VggishAudioEncoder(Executor):
    """
     Encode audio data with Vggish embeddings

     :param model_path: path of the pre-trained Vggish model
     :param pca_path: path of the pre-trained PCA model
     :param default_traversal_paths: fallback batch size in case there is not batch size sent in the request
     """

    def __init__(self,
                 model_path: str = os.path.join(cur_dir, 'models/vggish_model.ckpt'),
                 pca_path: str = os.path.join(cur_dir, 'models/vggish_pca_params.npz'),
                 default_traversal_paths: Optional[Iterable[str]] = None,
                 *args, **kwargs):

        super().__init__(*args, **kwargs)
        self.model_path = model_path
        self.pca_path = pca_path
        self.default_traversal_paths = default_traversal_paths or ['r']

        self.sess = tf.compat.v1.Session()
        define_vggish_slim()
        load_vggish_slim_checkpoint(self.sess, self.model_path)
        self.feature_tensor = self.sess.graph.get_tensor_by_name(
            INPUT_TENSOR_NAME)
        self.embedding_tensor = self.sess.graph.get_tensor_by_name(
            OUTPUT_TENSOR_NAME)
        self.post_processor = Postprocessor(self.pca_path)

    @requests
    def encode(self, docs: Optional[DocumentArray], parameters: dict, **kwargs):
        """
        Compute embeddings and store them in the `docs` array.

        :param docs: documents sent to the encoder. The docs must have `text`.
            By default, the input `text` must be a `list` of `str`.
        :param parameters: dictionary to define the `traversal_paths` and the `batch_size`. For example,
               `parameters={'traversal_paths': ['r'], 'batch_size': 10}`.
        :param kwargs: Additional key value arguments.
        :return:
        """
        if docs:
            cleaned_document_array = get_docs_batch_generator(
                docs,
                traversal_path=parameters.get('traversal_paths', self.default_traversal_paths),
                batch_size=1,
                needs_attr='blob'
            )
            self._create_embeddings(cleaned_document_array)

    def _create_embeddings(self, filtered_docs: Iterable):
        """Update the documents with the embeddings generated by VGGISH"""

        for d in filtered_docs:
            # Vggish broadcasts across different length audios, not batches
            print('###', len(d))
            [embedding] = self.sess.run([self.embedding_tensor], feed_dict={self.feature_tensor: d[0].blob})
            result = self.post_processor.postprocess(embedding)
            d[0].embedding = (np.float32(result) - 128.) / 128.

    def close(self):
        self.sess.close()
